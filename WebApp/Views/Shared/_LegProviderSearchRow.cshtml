@using WebApp.Utils
@using Utils
@using BLL.DTO.Entities
@using WebApp.ViewModels.Shared
@model WebApp.ViewModels.Shared.LegProviderSearchRowModel

<tr class="@SubLegClass">
    <td>
        @if (Summary.IsCombination)
        {
            <div class="btn btn-primary collapse show @CollapseId no-animation" type="button" data-bs-toggle="collapse" data-bs-target=".@CollapseId" aria-expanded="false">
                +
            </div>
            <div class="btn btn-primary collapse @CollapseId no-animation" type="button" data-bs-toggle="collapse" data-bs-target=".@CollapseId" aria-expanded="false">
                -
            </div>
        }
    </td>
    <td>
        @Summary.StartLocation
    </td>
    <td>
        @Summary.EndLocation
    </td>
    <td>
        @Summary.Departure.ToSpan(Context)
    </td>
    <td>
        @Summary.Arrival.ToSpan(Context)
    </td>
    <td>
        @FormattingUtils.FormatTimeSpan(Summary.Arrival - Summary.Departure)
    </td>
    <td>
        @Summary.Price
    </td>
    <td>
        @Summary.Distance km
    </td>
    <td>
        @Summary.CompanyName
    </td>
    <td>
        @if (Summary.ValidUntil < DateTime.UtcNow)
        {
            <span class="text-danger">Offer expired!</span>
        }
        else if (User.Identity?.IsAuthenticated ?? false)
        {
            <a asp-controller="Reservations" asp-action="Create" asp-all-route-data="ReservationRouteData" class="btn btn-primary">
                Reserve
            </a>
        }
    </td>
</tr>
@if (Summary.SubLegs != null)
{
    @foreach (var subSummary in Summary.SubLegs)
    {
        <partial name="_LegProviderSearchRow"
                 model="new LegProviderSearchRowModel(subSummary, CollapseId, true)"/>
    }
}

@functions
{
    string SubLegClass => Model.IsSubLeg ? $"collapse {CollapseId} sub-row" : string.Empty;
    LegProviderSummary Summary => Model.Summary;
    string CollapseId => Model.CollapseId;

    const string QueryParamName = "legProviderIds";
    IDictionary<string, string> ReservationRouteData
    {
        get
        {
            if (Summary.IsNotCombination)
            {
                return new Dictionary<string, string>
                {
                    { QueryParamName, Summary.Id!.Value.ToString() }
                };
            }
            var result = new Dictionary<string, string>();
            if (Summary.SubLegs != null)
            {
                var c = 0;
                foreach (var subLeg in Summary.SubLegs)
                {
                    if (subLeg.Id == null)
                    {
                        throw new ApplicationException("Unexpected null ID");
                    }
                    result[$"{QueryParamName}[{c}]"] = subLeg.Id!.Value.ToString();
                    c++;
                }
            }
            return result;
        }
    }  
}